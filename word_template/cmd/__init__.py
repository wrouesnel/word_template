import sys
from pathlib import Path
from typing import List, Any, Dict

import click
import docxtpl
import jinja2

from word_template.lib.yamlutil import read_yaml_dir, yaml

def _get_context(tpl, inputs: List[str]):
    # Check context files make sense
    context: Dict[str, Any] = {}
    for input in inputs:
        input = Path(input)
        if input.is_dir():
            context[input.name] = read_yaml_dir(tpl, input)
        else:
            pchunks = input.name.rsplit(".", 1)
            if len(pchunks) == 2:
                if pchunks[1] in ("yaml", "yml", "json"):
                    with input.open("rt") as f:
                        context[pchunks[0]] = yaml.load(f)
                    continue
                elif pchunks[1] in ("png",):
                    context[pchunks[0]] = docxtpl.InlineImage(tpl, input.as_posix())
                    continue
            with input.open("rt") as f:
                context[input.name] = f.read()
    return context

@click.group()
def main():
    """Word DOCX templating system

    See https://docxtpl.readthedocs.io/en/latest/ for more details on using Jinja2 to
    prepare a template.
    """
    pass

@main.command()
@click.argument(
    "template", type=click.Path(exists=True, readable=True, dir_okay=False, path_type=str), nargs=1
)
@click.argument(
    "output", type=click.Path(exists=False, readable=True, dir_okay=False, path_type=str), nargs=1
)
@click.argument(
    "inputs", type=click.Path(exists=True, readable=True, dir_okay=True, path_type=str), nargs=-1
)
def render(template: str, output: str, inputs: List[str]):
    """Execute a Word document template to the output file, using the supplied inputs.

    Inputs may either be YAML files or exploded YAML folders.
    """

    doc = docxtpl.DocxTemplate(template)

    # Check context files make sense
    context = _get_context(doc, inputs)

    jinja_env = jinja2.Environment()

    doc.render(context=context, jinja_env=jinja_env)
    doc.save(output)


@main.command("show-context")
@click.argument(
    "inputs", type=click.Path(exists=True, readable=True, dir_okay=True, path_type=str), nargs=-1
)
def show_context(inputs: List[str]):
    """Output a YAML file of the context generated by inputs."""
    tpl = docxtpl.DocxTemplate(None)
    context = _get_context(tpl, inputs)
    yaml.dump(context, sys.stdout)
